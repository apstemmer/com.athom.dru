"use strict";
//var runClient = require('./fireplace.js');
var ipPromise = require('./UDPpromise.js')();
var modbus = require('jsmodbus');
const devices = {};//object containing all currently initiated devices,key UID, value property is Fireplace object

const FIREPLACE_STATUS_REG = 40203;
const FIREPLACE_ACTION_REG = 40200;
const FAULT_DETAIL_REG = 40204;
const ROOM_TEMPERATURE_REG = 40207;
const COMM_TIMEOUT_REG = 40202;
const RSSI_GATEWAY_REG = 40205;
const RSSI_DFGT_REG = 40206;

var gateway = new Promise((res,rej)=>{
  ipPromise.then((ip)=>{
    let client = modbus.client.tcp.complete({
      host: ip,
      port: 502,
      autoReconnect: true,
      reconnectTimeout: 1000,
      timeout: 5000,
      unitId: 1
    });

    client.connect();
    client.on('close', function(){
      console.log('closed');
    });
    client.once('connect',()=>{
      console.log('gateway connected');
      res(client);
    });
  },()=>{
    console.log('rejected client making');
    rej();
  });
});

module.exports = {
  init:function(devices_data, callback){
    let waitArray = [];
    gateway.then((cli)=>{
      devices_data.forEach((elem)=>{
        devices[elem.unitId] = new Promise((res,rej)=>{
          let fireplace = modbus.client.tcp.complete({
            host: cli.host,
            port: 502,
            autoReconnect: true,
            reconnectTimeout: 1000,
            timeout: 5000,
            unitId: elem.unitId
          });

          fireplace.connect();
          fireplace.on('close', function(){
            console.log('closeded inited');
          });
          fireplace.once('connect',()=>{
            res(fireplace);
          });
          fireplace.on('error',(err)=>{
            console.log(err);
          });
        });
        waitArray.push(devices[elem.unitId]);
      });
      console.log(waitArray);
      Promise.all(waitArray).then(()=>{
        console.log('made all the fireplaces');
        return callback(null,true);
      },()=>{
        console.log('failed to make all fireplaces');
      });
    });


  },
  pair:function(socket){
    console.log('pairing...');
    socket.on('list_devices', (data,callback)=>{
        gateway.then((cli)=>{
          //retrieve all devices bound to gateway
          cli.readHoldingRegisters(40201,8).then((data)=>{
            console.log('list of unitIds found ',data.register);
            var deviceList = [];
            data.register.forEach((elem)=>{
              if(elem){//register is 0(falsey) if not bound
                var dev = {
                  data:{
                    unitId:elem
                  },
                  name: 'Fireplace '+(elem-1)
                };
                deviceList.push(dev);
              }
            });
            cli.close();
            callback(null, deviceList);
          }).fail((err)=>{
            console.log(`could not run client ${err}`);
          }).done(()=>{
            console.log(cli.getState());
          });
        });
      });

      socket.on('add_device',(device, callback)=>{
        gateway.then((cli)=>{
        devices[device.unitId] = new Promise((res,rej)=>{
          let fireplace = modbus.client.tcp.complete({
            host: cli.host,
            port: 502,
            autoReconnect: true,
            reconnectTimeout: 1000,
            timeout: 5000,
            unitId: device.unitId
          });

          fireplace.connect();
          fireplace.on('close', function(){
            console.log('closed new added');
          });
          fireplace.once('connect',()=>{
            //console.log(2);

            console.log('fpconn');
            fireplace.writeSingleRegister(FIREPLACE_ACTION_REG,103).then(()=>{
                res(fireplace);
            }).fail((fail)=>{
              console.log('fail by init', fail);
            });

          });
          fireplace.on('error',(err)=>{
            console.log(err);
          });
        });
        callback(null,true);
      });
    });
  },
  capabilities: {
    light:{
      get:function(device_data, callback){
        console.log(device_data);
        callback(null,true);
      },
      set:function(device_data, args, callback){
        devices[device_data.unitId].then((fireplace)=>{
          console.log('sets',devices[device_data.unitId]);
          var stateReg = 0;
          if(args === 'on'){
            stateReg = 103;
          }else if(args === 'off'){
            stateReg = 5;
          }
          console.log(fireplace.getState());
          fireplace.readHoldingRegisters(40203,1).then(()=>{
            console.log('actually turned', args);
            callback(null,true);
          },(fail)=>{
            console.log(fail);
          });
        });
      }
    },
    temp:{
      get:function(device_data, callback){

      },
      set:function(device_data, target, callback){

      }
    }

  },
  deleted:function(device_data){
    delete devices[device_data.unitId];
    console.log('deleted' + device_data.unitId);
  }
};
